t *id
p *id
p *t
c
p *t
c
q
b setDeclaratorListSpecifier
r
p *id
p *p
p *p -> type
n
n
n
n
s
p *a
p *a->type
p *a->type->element_type
q
int main(void){
r
backtrace
frame 1
p *id
p *id->prev
q
r
q
r
backtrace
p *id
exit
b makeIdentifier
r
c
c
c
c
c
c
c
p *s
r
c
c
c
c
c
c
c
c
q
b isNotSameFormalParameters
r
p *a
p *b
n
n
n
n
n
n
q
b isNotSameFormalParameters
r
p *a
p *b
n
q
b syntax_error
r
b printf
r
q
b semantic_error
r
backtrace
exit
r
backtrace
p lit
p literal_table
frame 1
p node
p node -> clink
p node -> name
p node -> clink -> name
p node -> clink
b put_literal
r
b sem_arg_expr_list
r
d
info b
b sem_statement
r
d
b sem_expression
r
info b
d
b sem_statement
r
p node -> name
c
r
n
n
n
p node
p node -> llink
p node -> rlink
p node -> name
n
exit
r
backtrace
b sem_expression
r
b sem_statement
r
exit
r
b semantic_error
r
backtrace
frame 1
p node
p node -> name
q
b checkTypeAndConvertLiteral
r
exit
b sem_for_expression
r
n
n
n
n
n
p t
p t -> name
p t -> kind
q
b checkForwardReference
r
c
p id
p id -> kind
p id -> kind -> type
p id -> type
p id -> type -> field
n
n
n
n
n
p id -> knd
p id -> kind
n
p id -> prev
p id -> prev -> kind
n
n
n
n
p id -> kind
p id -> kind -> field
p id -> type -> field
n
n
n
n
r
r
p lit
q
r
p lit
b put_literal
r
r
c
q
r
q
r
backtrace
q
r
p id
p id->kind
backtrace
frame 1
frame 2
p node
p node -> name
p node -> llink
p node -> llink -> name
p node -> llink -> kind
q
r
frame 2
p node
p node -> name
p node -> rlink
p node -> link
p node -> llink
p node -> llink -> name
p node -> llink -> address
frame 2
frame 1
frame 2
p node -> llink
frame 1
bt
frame 2
p node -> line
p node -> type
p node -> llink
p node -> rlink
p node -> name
q
c
b gen_expression_left
r
p node
p node -> name
p node -> name -> clink
n
n
n
n
p id
p id -> kind
q
q
r
b semantic_error
r
frame 1
q
r
p node
bt
frame 1
p node
p node -> name
p node -> clink
p node -> 
p node -> clink -> name
p node -> clink -> kind
p node -> rlink -> name
q
